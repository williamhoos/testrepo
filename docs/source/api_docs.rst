.. _API documentation:

=================
API documentation 
=================

This section describes the processes, functions, methods and source files used in those portions of the workflow diagrams that rely upon APIs in performing the defined flow.  

.. Attention::  As stated herein, all source file references are based on the current Subversion source code repository, but will need to be updated as the source files are moved into the GitHub repository as part of the OSS migration initiative. 
 

.. _Landing page:

Landing page
************

This page loads when the client first visits the URL of a specific portal.

URL: https://widget2.peerplatform.org/portal/[PORTAL_ID]
API: /portal/getportalinfo

Source Files: 

OpenID/trunk/private-access-server/private-access-webportal/src/main/java/com/privateaccess/webportal/controller/LoginController.java

The API call to getportalinfo retrieves portal information configured for the specified portal set in the session attribute called “portalInfo”.  This session attribute is taken from the URL which contains the Portal ID.  An example portal URL is as follows:

https://widget2-beta.peerplatform.org/portal/474

The API will return an APIResponse object (See OpenID/trunk/private-access-server/private-access-webportal/src/main/java/com/privateaccess/webportal/model/APIResponse.java) the data field of which contains the portal information in a PortalInfo object (See OpenID/trunk/private-access-server/private-access-webportal/src/main/java/com/privateaccess/webportal/model /PortalInfo.java)  for the specified Portal ID.

Here is an example response::

 {  
    "status":"success",
    "message":"success",
    "isSuccess":true,
    "data":{  
       "widgetId":"474",
       "prepend":"",
       "referralCode":"",
       "trialButtonId":"106",
       "authorizeUrl":"openid_connect_login?portalWidgetId=474",
       "registrationSuccessUrl":null,
       "isDemo":false,
       "isFresh":null,
       "psid":null
    }
 }


.. _Sign-up and sign-in APIs:

Sign-up and sign-in functions
*****************************

.. _PA-01 API:

Set portal information (PA-01)
------------------------------

**API:/portal/setportalinfo**

**References**

    * Invoked at step 001 of :ref:`Register or login` (for new users)
    * Invoked at step 001 of :ref:`Login selection` (for returning users)

**Purpose or Use:**

    This API call sets the portal information into a session object for use by the PA Connect service during registration of a new user or sign in of an existing user.  The API informs PA Connect the portal that the Account Holder has logged into, which enables the service to know where to return the user after they have been successfully authenticated.
    
**Source files:**

 OpenID/trunk/private-access-server/private-access-webportal/src/main/java/com/privateaccess/peer/controller/LoginController.java

**Example of JSON input**::

 {  
    "widgetId":"474",
    "prepend":"",
    "referralCode":"",
    "trialButtonId":106,
    "authorizeUrl":"openid_connect_login?portalWidgetId=474",
    "isDemo":false,
    "registrationSuccessUrl":null
 }


.. _PA-02 API:

Get portal name (PA-02)
-----------------------

**API: /services/widgetinfo/getPortalName/[PORTAL_ID]**

**Reference**
    
    * Invoked at step 001 of :ref:`Register or login` (for new users)
    * Invoked at step 001 of :ref:`Login selection` (for returning users)
    
**Purpose or Use:**

   This API call retrieves the name of the portal for which the participant will be signing in or registering.  This enables the name of that registry to be displayed on the login screen generated by the PA Connect service. 

**Source files:**

 OpenID/trunk/private-access-server/private-access-webportal/src/main/java/com/privateaccess/peer/controller/WidgetInfoController.java 
 
 OpenID/trunk/private-access-server/private-access-openid-server/src/main/java/com/privateaccess/peer/models/ TblWidgetInfo.java

**Data accessed from:** 

    * dbPPMS_D.tblWidgetInfo 
    * dbPPMS_D_Demo.tblWidgetInfo

**Example of JSON response**::

 {  
    "status":"success",
    "message":"success",
    "isSuccess":true,
    "data":{  
       "portalFullName":"Portal Full Name",
       "portalNickName":"Portal Nickname"
    }
 }


.. _PA-03 API:

Login (PA-03)
-------------

**API:/login**

**References**

    * Invoked at step 007 of :ref:`Login selection`
    * Invoked at step 074 of :ref:`Activate account`

**Purpose or Use:**

   This API is invoked when a user enters their username or an email address into the returning user field and clicks on the “Sign in” button during the login process or clicks on the link in the verification email that is sent to a new user (and that when clicked signals the application to skip the sign-in and challenge questions screens, and proceed directly to the password entry screen).  The API passes to the PA Connect service the name or email address that was entered by the user (or conveyed by employing the single-use token in the verification email), along with any parameters (such as whether the Remember Me option was toggled on or off by the user before he or she clicked on the "Sign in" button).

**Source files:**
  
 OpenID/trunk/private-access-server/ private-access-openid-server/src/main/java/com/privateaccess/openid/connect/controller  /LoginController.java
 
 OpenID/trunk/private-access-server/private-access-openid-server/src/main/java/com/privateaccess/openid/connect/model/UserAccount.java

**Data accessed from:** 

    * dbPPMS_D.user_account 
    * dbPPMS_D_Demo.user_account

**Request Headers:**

    Authorization – oAuth token

**Query parameters:**

       None

**Form parameters:**

    * **user** – string (required) - user name or email address for the user wishing to login
    * **rememberMe** – string (optional) - indicates whether the user has invoked (or disabled) the Remember Me option in connection with this login (and that will in turn affect his or her future login experience)
    * **authorizedURL** – string (optional) - indicates whether to bypass the enter username screen because the user came from a new account verification email link
    * **model** - ModelMap (required) - Spring framework that is used by the application to model data objects
    * **request** - HttpServletRequest (required) - the object passed to the processLogin method, including any query parameters
    * **response** - HttpServletResponse (required) - the object returned to the client browser
    * **session** - HttpSession (required) - stores the session information (username, user id) for later screens/methods to utilize

.. Note:: We should elaborate on the use of the Spring Framework ModelMap class.

**Status codes:** n/a

**Method:** processLogin

*Input parameters*

    * **rememberMe** – string (required) - permits a value of Yes or Null 
    * **model** - ModelMap (required) 
    * **request** - HttpServletRequest (required)
    * **response** - HttpServletResponse (required)
    * **session** - HttpSession (required)
    * **userAccount** - UserAccount (required)
    * **userSiteKey** - UserSiteKey (required)
    * **list** - List<UserLoginChallenge> (required)

*Valid Responses*

    * **URL** (string) - If the userAccount object has not been verified, this response redirects the browser to the "complete verification" instruction screen that informs the user to verify his or her registration by clicking on the link in the system-generated email message, and enables them to send a new message if the earlier one was lost or not received
    * **Login error** (string) - If the account has not set challenge questions 
    * **Login error** (string) - If the user name or account does not exist
    * **Null** (string) - Calls the next API call (API:/question)
    
.. Hint:: We may wish to create two or more specific error messages that will inform the user of the reasons for the error rather than a generic error message that covers multiple issues.

**Example call**::

 Example request here

**Example result**::

 Example response here


.. _PA-04 API:

Enter challenge question (PA-04)
--------------------------------

**API:/question**

**Reference**

    * Invoked at step 090 of :ref:`Existing user verification`

**Purpose or Use:**

This API is invoked when the user clicks on the sign-in button after entering responses to the challenge questions that are generated by the application to deter phishing-type attacks.  The API call passes the user’s answers back to the PA Connect server, which responds with an instruction to the application client to either display an appropriate error message (092) or to display the screen (091) for submittal of the user’s password.

**Source files::**

  OpenID/trunk/private-access-server/ private-access-openid-server/src/main/java/com/privateaccess/openid/connect/controller/LoginController.java

  OpenID/trunk/private-access-server/private-access-openid-server/src/main/java/com/privateaccess/openid/connect/model/UserLoginChallenge.java
 
**Data accessed from:**  

    * dbPPMS_D.user_login_challenge
    * dbPPMS_D_Demo.user_login_challenge


.. _PA-05 API:

Enter Password (PA-05)
----------------------

**API:/password**

**References**

    * Invoked at step 076 of :ref:`Activate account` (first time user)
    * Invoked at step 104 of :ref:`Password entry` (returning user)

**Purpose or Use:**

    After the user enters his or her password and clicks on the “Sign in” button, this API call is made by PEER to pass the user’s password entry to the PA Connect server, which responds with an instruction to the client to either display the appropriate error message or to open the welcome screen (080) if this is the first time the user has visited the registry, or takes them to the main user dashboard (085) and the profile the user was last using in the case of a returning user.

**Source files::**

 OpenID/trunk/private-access-server/ private-access-openid-server/src/main/java/com/privateaccess/openid/connect/controller/LoginController.java
 
 OpenID/trunk/private-access-server/private-access-openid-server/src/main/java/com/privateaccess/openid/connect/model/UserAccount.java

**Data accessed from:**  

    * dbPPMS_D.user_account
    * dbPPMS_D_Demo.user_account






**BELOW IS AN API TEMPLATE FOR FUTURE USE - COPY / DO NOT REMOVE**

.. _TBD API:

Future template (symbol)
************************

**API:/**

**References**

    * Invoked at step XXX of :ref:``
    * Invoked at step XXX of :ref:``

**Purpose or Use:**

   This API is invoked when / called by....

**Source files:**
  
  Enter all that are applicable

**Data accessed from:** 

    * database.table 
    * database.table

**Request Headers:**

    Authorization – oAuth token

**Query parameters:**

    If applicable

**Form parameters:**

    * ** ** – string (required) - description of purpose
    * ** ** – string (optional) - other comments 

**Status codes:** n/a

**Method:** nameHere

*Input parameters*

    * ** ** – string (required) - description of purpose
    * ** ** – string (optional) - other comments 

*Valid responses*

    * ** ** – response - description of use
    * ** ** – response - other comments 

**Example call**::

 Example request here

**Example result**::

 Example response here

.. Attention:: Necessary before OSS begins.

.. Note:: Nice to have before OSS community joins.

.. Hint:: Future suggestions, if any.
